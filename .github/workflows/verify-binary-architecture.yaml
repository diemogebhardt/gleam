name: verify-binary-architecture
on: push
# on: workflow_dispatch

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"

jobs:
  build-release:
    name: build-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-musl
          - x86_64-apple-darwin
          - aarch64-apple-darwin
          - x86_64-pc-windows-msvc
          - aarch64-pc-windows-msvc
        toolchain: [stable]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            use-cross: false
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            use-cross: true
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            use-cross: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            use-cross: true
          # macos>=14 runs exclusively on aarch64 and will thus fail to execute properly for x64
          - os: macos-13
            target: x86_64-apple-darwin
            use-cross: false
          - os: macos-latest
            target: aarch64-apple-darwin
            use-cross: false
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            use-cross: false
          - os: windows-latest         # Add ARM64 Windows config
            target: aarch64-pc-windows-msvc
            use-cross: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.toolchain }}
          target: ${{ matrix.target }}

      - name: Handle Rust dependencies caching
        uses: Swatinem/rust-cache@v2
        with:
          key: v1-${{ matrix.target }}

      - name: Build release binary
        uses: clechasseur/rs-cargo@v2
        with:
          command: build
          args: --release --target ${{ matrix.target }}
          use-cross: ${{ matrix.use-cross }}

      - name: Verify binary architecture
        shell: bash
        run: |
          #!/usr/bin/env bash
          set -xeuo pipefail

          BINARY_PATH="target/${{ matrix.target }}/release/gleam"
          if [[ "${{ matrix.target }}" == *"-windows-"* ]]; then
            BINARY_PATH="${BINARY_PATH}.exe"
          fi

          echo "=== Parsing target architecture ==="
          case "${{ matrix.target }}" in
            "x86_64"*) TARGET_ARCHITECTURE="x86_64" ;;
            "aarch64"*) TARGET_ARCHITECTURE="aarch64" ;;
            *) echo "Unknown architecture for target '${{ matrix.target }}'"; exit 1 ;;
          esac
          echo "Target architecture: ${TARGET_ARCHITECTURE}"

          case "${{ matrix.target }}" in
            *"-darwin"*)
              echo "=== Checking Darwin binary ==="
              FILE_OUTPUT=$(file -b "${BINARY_PATH}")
              echo "File output: ${FILE_OUTPUT}"
              BINARY_ARCHITECTURE=$(echo "${FILE_OUTPUT}" | grep -o "x86_64\|arm64" || echo "")
              echo "Found architecture: ${BINARY_ARCHITECTURE}"

              case "${TARGET_ARCHITECTURE}" in
                "x86_64") EXPECTED_BINARY_ARCHITECTURE="x86_64" ;;
                "aarch64") EXPECTED_BINARY_ARCHITECTURE="arm64" ;;
                *) echo "Unknown Darwin architecture: ${TARGET_ARCHITECTURE}"; exit 1 ;;
              esac
              ;;
            *"-linux-"*)
              echo "=== Checking Linux binary ==="
              FILE_OUTPUT=$(file -b "${BINARY_PATH}")
              echo "File output: ${FILE_OUTPUT}"
              BINARY_ARCHITECTURE=$(echo "${FILE_OUTPUT}" | grep -o "x86-64\|aarch64" | head -n1 || echo "")
              echo "Found architecture: ${BINARY_ARCHITECTURE}"

              case "${TARGET_ARCHITECTURE}" in
                "x86_64") EXPECTED_BINARY_ARCHITECTURE="x86-64" ;;
                "aarch64") EXPECTED_BINARY_ARCHITECTURE="aarch64" ;;
                *) echo "Unknown Linux architecture: ${TARGET_ARCHITECTURE}"; exit 1 ;;
              esac
              ;;
            *"-windows-"*)
              echo "=== Checking Windows binary ==="
              FILE_OUTPUT=$(powershell -Command "
                \$bytes = [System.IO.File]::ReadAllBytes('${BINARY_PATH}');
                \$offset = [System.BitConverter]::ToInt32(\$bytes, 0x3c);
                \$machine = [System.BitConverter]::ToUInt16(\$bytes, \$offset + 4);
                Write-Output \$machine
              " 2>&1) || echo "PE check failed"
              echo "PE header output: ${FILE_OUTPUT}"
              case "${FILE_OUTPUT}" in
                *"34404"*) BINARY_ARCHITECTURE="X64" ;;     # 0x8664
                *"43620"*) BINARY_ARCHITECTURE="Arm64" ;;   # 0xAA64
                *) echo "Unknown PE machine type: ${FILE_OUTPUT}"; exit 1 ;;
              esac
              echo "Detected architecture: ${BINARY_ARCHITECTURE}"

              case "${TARGET_ARCHITECTURE}" in
                "x86_64") EXPECTED_BINARY_ARCHITECTURE="X64" ;;
                "aarch64") EXPECTED_BINARY_ARCHITECTURE="Arm64" ;;
                *) echo "Unknown Windows architecture: ${TARGET_ARCHITECTURE}"; exit 1 ;;
              esac
              ;;
            *)
              echo "Unknown OS in target: '${{ matrix.target }}'"
              exit 1
              ;;
          esac

          echo "=== Verifying architecture ==="
          if [[ "${BINARY_ARCHITECTURE}" != "${EXPECTED_BINARY_ARCHITECTURE}" ]]; then
            echo "Architecture mismatch for '${{ matrix.target }}'"
            echo "Expected: '${EXPECTED_BINARY_ARCHITECTURE}'"
            echo "Got: '${BINARY_ARCHITECTURE}'"
            exit 1
          fi
          echo "Architecture verification successful"
