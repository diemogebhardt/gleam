name: verify-binary-architecture
on: push
# on: workflow_dispatch

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"

jobs:
  build-release:
    name: build-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        target:
          # - x86_64-unknown-linux-musl
          # - aarch64-unknown-linux-musl
          # - x86_64-apple-darwin
          # - aarch64-apple-darwin
          - x86_64-pc-windows-msvc
        toolchain: [stable]
        include:
          # - os: ubuntu-latest
          #   target: x86_64-unknown-linux-musl
          #   use-cross: true
          # - os: ubuntu-latest
          #   target: aarch64-unknown-linux-musl
          #   use-cross: true
          # # macos>=14 runs exclusively on aarch64 and will thus fail to execute properly for x64
          # - os: macos-13
          #   target: x86_64-apple-darwin
          #   use-cross: false
          # - os: macos-latest
          #   target: aarch64-apple-darwin
          #   use-cross: false
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            use-cross: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.toolchain }}
          target: ${{ matrix.target }}

      - name: Handle Rust dependencies caching
        uses: Swatinem/rust-cache@v2
        with:
          key: v1-${{ matrix.target }}

      - name: Build release binary
        uses: clechasseur/rs-cargo@v2
        with:
          command: build
          args: --release --target ${{ matrix.target }}
          use-cross: ${{ matrix.use-cross }}

      - name: Verify binary architecture
        shell: bash
        run: |
          set -xeuo pipefail

          BINARY_PATH="target/${{ matrix.target }}/release/gleam"
          if [[ "${{ matrix.target }}" == *"-windows-"* ]]; then
            BINARY_PATH="${BINARY_PATH}.exe"
          fi

          case "${{ matrix.target }}" in
            "x86_64"*) TARGET_ARCHITECTURE="x86_64" ;;
            "aarch64"*) TARGET_ARCHITECTURE="aarch64" ;;
            *) echo "Unknown architecture for target '${{ matrix.target }}'"; exit 1 ;;
          esac

          case "${{ matrix.target }}" in
            *"-darwin"*)
              FILE_OUTPUT=$(file "${BINARY_PATH}")
              echo "DEBUG: Full file output: ${FILE_OUTPUT}"
              FILE_CONTENT=${FILE_OUTPUT#"${BINARY_PATH}: "}
              echo "DEBUG: After removing prefix: ${FILE_CONTENT}"
              BINARY_ARCHITECTURE=$(echo "$FILE_CONTENT" | grep -o "x86_64\|arm64" || echo "")
              echo "DEBUG: Found architecture: ${BINARY_ARCHITECTURE}"
              case "${TARGET_ARCHITECTURE}" in
                "x86_64") EXPECTED_BINARY_ARCHITECTURE="x86_64" ;;
                "aarch64") EXPECTED_BINARY_ARCHITECTURE="arm64" ;;
                *) echo "Unknown Darwin architecture: ${TARGET_ARCHITECTURE}"; exit 1 ;;
              esac
              ;;
            *"-linux-"*)
              FILE_OUTPUT=$(file "${BINARY_PATH}")
              echo "DEBUG: Full file output: ${FILE_OUTPUT}"
              FILE_CONTENT=${FILE_OUTPUT#"${BINARY_PATH}: "}
              echo "DEBUG: After removing prefix: ${FILE_CONTENT}"
              BINARY_ARCHITECTURE=$(echo "$FILE_CONTENT" | grep -o "x86-64\|aarch64" || echo "")
              echo "DEBUG: Found architecture: ${BINARY_ARCHITECTURE}"
              case "${TARGET_ARCHITECTURE}" in
                "x86_64") EXPECTED_BINARY_ARCHITECTURE="x86-64" ;;
                "aarch64") EXPECTED_BINARY_ARCHITECTURE="aarch64" ;;
                *) echo "Unknown Linux architecture: ${TARGET_ARCHITECTURE}"; exit 1 ;;
              esac
              ;;
              *"-windows-"*)
                echo "DEBUG: Checking Windows binary: ${BINARY_PATH}"

                echo "=== Method 1: dumpbin ==="
                powershell -Command "Write-Output 'Running dumpbin...'; if (Test-Path env:VCINSTALLDIR) { & \"$env:VCINSTALLDIR/bin/Hostx64/x64/dumpbin.exe\" /headers '${BINARY_PATH}' } else { Write-Output 'VCINSTALLDIR not found' }" || echo "dumpbin failed"

                echo "=== Method 2: Get-Item ==="
                powershell -Command "Write-Output 'FileDescription:'; (Get-Item '${BINARY_PATH}').VersionInfo.FileDescription; Write-Output 'Full VersionInfo:'; (Get-Item '${BINARY_PATH}').VersionInfo | Format-List" || echo "Get-Item failed"

                echo "=== Method 3: Assembly check ==="
                powershell -Command "Write-Output 'Assembly info:'; [System.Reflection.AssemblyName]::GetAssemblyName('${BINARY_PATH}').ProcessorArchitecture" || echo "Assembly check failed"

                echo "=== Method 4: Get-Command ==="
                powershell -Command "Write-Output 'Command info:'; Get-Command '${BINARY_PATH}' | Format-List" || echo "Get-Command failed"

                echo "=== Method 5: File properties ==="
                powershell -Command "Write-Output 'File properties:'; Get-Item '${BINARY_PATH}' | Format-List *" || echo "Get-Item Format-List failed"

                echo "=== Method 6: Binary header check ==="
                powershell -Command "Write-Output 'First bytes of binary:'; [System.IO.File]::ReadAllBytes('${BINARY_PATH}')[0..10] | Format-Hex" || echo "Binary check failed"

                echo "DEBUG: Showing all outputs before implementing solution"
                exit 1
                ;;
            # *"-windows-"*)
            #   echo "DEBUG: Checking Windows binary: ${BINARY_PATH}"
            #   PS_OUTPUT=$(powershell -Command "[System.Reflection.AssemblyName]::GetAssemblyName('${BINARY_PATH}').ProcessorArchitecture")
            #   echo "DEBUG: PowerShell output: ${PS_OUTPUT}"
            #   BINARY_ARCHITECTURE="${PS_OUTPUT}"
            #   echo "DEBUG: Windows binary architecture output: ${BINARY_ARCHITECTURE}"
            #   case "${TARGET_ARCHITECTURE}" in
            #     "x86_64") EXPECTED_BINARY_ARCHITECTURE="X64" ;;
            #     "aarch64") EXPECTED_BINARY_ARCHITECTURE="Arm64" ;;
            #     *) echo "Unknown Windows architecture: ${TARGET_ARCHITECTURE}"; exit 1 ;;
            #   esac
            #   ;;
            *)
              echo "Unknown OS in target: '${{ matrix.target }}'"
              exit 1
              ;;
          esac

          if [[ -z "${EXPECTED_BINARY_ARCHITECTURE}" ]]; then
            echo "Unknown architecture '${TARGET_ARCHITECTURE}' for target '${{ matrix.target }}'"
            exit 1
          fi

          if [[ "${BINARY_ARCHITECTURE}" != "${EXPECTED_BINARY_ARCHITECTURE}" ]]; then
            echo "Architecture mismatch for '${{ matrix.target }}'"
            echo "Expected: '${EXPECTED_BINARY_ARCHITECTURE}'"
            echo "Got: '${BINARY_ARCHITECTURE}'"
            exit 1
          fi
