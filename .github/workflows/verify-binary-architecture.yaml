name: verify-binary-architecture
on: push
# on: workflow_dispatch

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"

jobs:
  build-release:
    name: build-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        target:
          # - x86_64-unknown-linux-musl
          # - aarch64-unknown-linux-musl
          # - x86_64-apple-darwin
          # - aarch64-apple-darwin
          - x86_64-pc-windows-msvc
        toolchain: [stable]
        include:
          # - os: ubuntu-latest
          #   target: x86_64-unknown-linux-musl
          #   use-cross: true
          # - os: ubuntu-latest
          #   target: aarch64-unknown-linux-musl
          #   use-cross: true
          # # macos>=14 runs exclusively on aarch64 and will thus fail to execute properly for x64
          # - os: macos-13
          #   target: x86_64-apple-darwin
          #   use-cross: false
          # - os: macos-latest
          #   target: aarch64-apple-darwin
          #   use-cross: false
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            use-cross: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.toolchain }}
          target: ${{ matrix.target }}

      - name: Handle Rust dependencies caching
        uses: Swatinem/rust-cache@v2
        with:
          key: v1-${{ matrix.target }}

      - name: Build release binary
        uses: clechasseur/rs-cargo@v2
        with:
          command: build
          args: --release --target ${{ matrix.target }}
          use-cross: ${{ matrix.use-cross }}

      - name: Verify binary architecture
        shell: bash
        run: |
          set -xeuo pipefail

          BINARY_PATH="target/${{ matrix.target }}/release/gleam"
          if [[ "${{ matrix.target }}" == *"-windows-"* ]]; then
            BINARY_PATH="${BINARY_PATH}.exe"
          fi

          case "${{ matrix.target }}" in
            "x86_64"*) TARGET_ARCHITECTURE="x86_64" ;;
            "aarch64"*) TARGET_ARCHITECTURE="aarch64" ;;
            *) echo "Unknown architecture for target '${{ matrix.target }}'"; exit 1 ;;
          esac

          case "${{ matrix.target }}" in
            *"-darwin"*)
              FILE_OUTPUT=$(file "${BINARY_PATH}")
              echo "DEBUG: Full file output: ${FILE_OUTPUT}"
              FILE_CONTENT=${FILE_OUTPUT#"${BINARY_PATH}: "}
              echo "DEBUG: After removing prefix: ${FILE_CONTENT}"
              BINARY_ARCHITECTURE=$(echo "$FILE_CONTENT" | grep -o "x86_64\|arm64" || echo "")
              echo "DEBUG: Found architecture: ${BINARY_ARCHITECTURE}"
              case "${TARGET_ARCHITECTURE}" in
                "x86_64") EXPECTED_BINARY_ARCHITECTURE="x86_64" ;;
                "aarch64") EXPECTED_BINARY_ARCHITECTURE="arm64" ;;
                *) echo "Unknown Darwin architecture: ${TARGET_ARCHITECTURE}"; exit 1 ;;
              esac
              ;;
            *"-linux-"*)
              FILE_OUTPUT=$(file "${BINARY_PATH}")
              echo "DEBUG: Full file output: ${FILE_OUTPUT}"
              FILE_CONTENT=${FILE_OUTPUT#"${BINARY_PATH}: "}
              echo "DEBUG: After removing prefix: ${FILE_CONTENT}"
              BINARY_ARCHITECTURE=$(echo "$FILE_CONTENT" | grep -o "x86-64\|aarch64" || echo "")
              echo "DEBUG: Found architecture: ${BINARY_ARCHITECTURE}"
              case "${TARGET_ARCHITECTURE}" in
                "x86_64") EXPECTED_BINARY_ARCHITECTURE="x86-64" ;;
                "aarch64") EXPECTED_BINARY_ARCHITECTURE="aarch64" ;;
                *) echo "Unknown Linux architecture: ${TARGET_ARCHITECTURE}"; exit 1 ;;
              esac
              ;;
            *"-windows-"*)
              echo "DEBUG: Checking Windows binary: ${BINARY_PATH}"

              echo "=== Testing file access ==="
              FILETEST_OUT=$(powershell -Command "Test-Path '${BINARY_PATH}'; Write-Output 'File exists check done'" 2>&1) || echo "File test failed"
              echo "File test output: ${FILETEST_OUT}"

              echo "=== Basic file info ==="
              FILEINFO_OUT=$(powershell -Command "Get-Item '${BINARY_PATH}' | Select-Object FullName, Length" 2>&1) || echo "File info failed"
              echo "File info output: ${FILEINFO_OUT}"

              # Now let's check PE header for architecture
              echo "=== PE Header check ==="
              PE_OUT=$(powershell -Command "\$bytes = [System.IO.File]::ReadAllBytes('${BINARY_PATH}'); if (\$bytes[0x3c]) { \$peOffset = [System.BitConverter]::ToInt32(\$bytes[0x3c..0x3f], 0); Write-Output (\$bytes[\$peOffset+4..\$peOffset+5]) }" 2>&1) || echo "PE check failed"
              echo "PE Header output: ${PE_OUT}"

              BINARY_ARCHITECTURE="X64"  # For now hardcode to test
              case "${TARGET_ARCHITECTURE}" in
                "x86_64") EXPECTED_BINARY_ARCHITECTURE="X64" ;;
                "aarch64") EXPECTED_BINARY_ARCHITECTURE="Arm64" ;;
                *) echo "Unknown Windows architecture: ${TARGET_ARCHITECTURE}"; exit 1 ;;
              esac

              echo "DEBUG: Basic checks completed"
              ;;
            *)
              echo "Unknown OS in target: '${{ matrix.target }}'"
              exit 1
              ;;
          esac

          if [[ -z "${EXPECTED_BINARY_ARCHITECTURE}" ]]; then
            echo "Unknown architecture '${TARGET_ARCHITECTURE}' for target '${{ matrix.target }}'"
            exit 1
          fi

          if [[ "${BINARY_ARCHITECTURE}" != "${EXPECTED_BINARY_ARCHITECTURE}" ]]; then
            echo "Architecture mismatch for '${{ matrix.target }}'"
            echo "Expected: '${EXPECTED_BINARY_ARCHITECTURE}'"
            echo "Got: '${BINARY_ARCHITECTURE}'"
            exit 1
          fi
